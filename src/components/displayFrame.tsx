import { motion, AnimatePresence } from 'framer-motion';
import { fadeIn } from '../transitions';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import React from 'react';

type ResponseType = {
    type: 'text' | 'image';
    content: string[];
    prompt: string[];
}

type Props = {
    response: ResponseType | null;
    isLoading?: boolean;
    selectedIdx: number | null;
    setSelectedIdx: (idx: number) => void;
};
  
// Display component to show the response
const Display = ({ response, isLoading = false, selectedIdx, setSelectedIdx }: Props) => {

    return (
        <motion.div 
            initial="hidden"
            animate="visible"
            variants={fadeIn}
            className="max-w-4xl mx-auto my-4 p-6 bg-white rounded-lg shadow-lg"
        >
            <h1 className="text-2xl font-bold mb-4 text-gray-800">Response</h1>
            <AnimatePresence mode="wait">
                {!isLoading && response ? (
                    <motion.div
                        key={Array.isArray(response.content) ? response.content.join('-') : response.content}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        transition={{ duration: 0.5 }}
                    >
                        {response.type === 'image' ? (
                            <div className="relative group">
                                {Array.isArray(response.content) && response.content.map((content, idx) => (
                                    <motion.img 
                                        key={`content-${idx}`}
                                        src={content} 
                                        alt="Generated by DALL-E" 
                                        className={`w-[90%] h-auto mx-auto rounded-lg shadow-md transform transition-transform duration-300 group-hover:scale-102 cursor-pointer ${
                                            selectedIdx === idx
                                                ? "border-4 border-[#fcb69f]"
                                                : "border-4 border-transparent"
                                        }`}
                                        layoutId="response-image"
                                        style={{
                                            boxShadow: selectedIdx === idx
                                                ? "0 8px 32px 0 rgba(255, 188, 143, 0.37)"
                                                : "0 8px 32px 0 rgba(37, 99, 235, 0.37)",
                                            transition: "box-shadow 0.3s, border-color 0.3s"
                                        }}
                                        onClick={() => { setSelectedIdx(idx); }}
                                    />
                                ))}
                            </div>
                        ) : (
                            <>
                            {/* Render all prompts and contents using for loop */}
                            {Array.isArray(response.prompt) && Array.isArray(response.content) && response.prompt.map((prompt, idx) => (
                                <React.Fragment key={`fragment-${idx}`}>
                                    <motion.div 
                                        key={`prompt-${idx}`}
                                        id={`response-prompt-${idx}`}
                                        className="mb-4 p-6 bg-gray-50 rounded-lg border border-gray-200 prose prose-sm lg:prose-base dark:prose-invert"
                                        initial={{ opacity: 0 }}
                                        animate={{ opacity: 1 }}
                                        transition={{ duration: 0.5, delay: 0.2 }}
                                    >
                                        <ReactMarkdown remarkPlugins={[remarkGfm]}>
                                            {prompt}
                                        </ReactMarkdown>
                                    </motion.div>
                                    <motion.div
                                        key={`content-${idx}`}
                                        id={`response-content-${idx}`}
                                        className={`text-lg leading-relaxed prose prose-sm lg:prose-base dark:prose-invert rounded-xl shadow-xl p-6 mb-4 text-left cursor-pointer ${
                                            selectedIdx === idx
                                                ? "border-l-8 border-[#fcb69f]"
                                                : "border-l-8 border-blue-500"
                                        }`}
                                        style={{
                                            background: selectedIdx === idx
                                                ? "linear-gradient(90deg, #ffecd2 0%, #fcb69f 100%)"
                                                : "linear-gradient(90deg, #2563eb 0%, #a21caf 125%)",
                                            color: selectedIdx === idx ? "#1e293b" : "#fff",
                                            transition: "color 0.3s"
                                        }}
                                        initial={{ opacity: 0 }}
                                        animate={{
                                            opacity: 1,
                                            scale: selectedIdx === idx ? 1.03 : 1,
                                            boxShadow: selectedIdx === idx
                                                ? "0 8px 32px 0 rgba(255, 188, 143, 0.37)"
                                                : "0 8px 32px 0 rgba(37, 99, 235, 0.37)"
                                        }}
                                        transition={{
                                            duration: 0.5,
                                            delay: 0.2,
                                            type: "spring",
                                            stiffness: 300
                                        }}
                                        onClick={() => { setSelectedIdx(idx); }}
                                    >
                                        <ReactMarkdown remarkPlugins={[remarkGfm]}>
                                            {Array.isArray(response.content) ? response.content[idx] : response.content}
                                        </ReactMarkdown>
                                    </motion.div>
                                </React.Fragment>
                            ))}
                            </>
                        )}
                    </motion.div>
                ) : isLoading ? (
                    <motion.div
                        className="flex flex-col items-center justify-center"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                    >
                        <div className="relative h-16 w-80">
                            {[...Array(5)].map((_, i) => (
                                <motion.div
                                    key={i}
                                    className="absolute top-0 h-4 w-4 rounded-full bg-gradient-to-r from-blue-400 to-purple-600"
                                    initial={{ x: 0 }}
                                    animate={{
                                        x: [0, 320, 0],
                                        scale: [1, 1.5, 1],
                                        opacity: [0.5, 1, 0.5]
                                    }}
                                    transition={{
                                        duration: 2.5,
                                        repeat: Infinity,
                                        delay: i * 0.2,
                                        ease: "easeInOut"
                                    }}
                                />
                            ))}
                        </div>
                    </motion.div>
                ) : (
                    <motion.p 
                        className="text-gray-500 italic"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                    >
                        Waiting for your creative prompt...
                    </motion.p>
                )}
            </AnimatePresence>
        </motion.div>
    );
};
  
export default Display;